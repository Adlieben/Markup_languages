---
title: "Purchasing your first guitar"
author: 
  - name: Adam Maghout
    orcid: 0009-0002-5241-0856
    email: a.maghout@uu.nl
    affiliations:
      - name: Methodology & Statistics @ UU University
date: 25 Sep 2024
date-format: "D MMM YYYY"
execute: 
  echo: true
editor: source
format: 
  revealjs:
    embed-resources: true
    progress: true
    multiplex: true
    transition: fade
    slide-number: true
    margin: 0.075
    logo: "images/logo.png" 
    toc: false
    toc-depth: 1
    toc-title: Outline
    scrollable: true
    reference-location: margin
    footer: Adam Maghout @ UU
    preview-links: true
---

## Getting into guitar

So you've done it. You've finally decided to start playing guitar after years of telling yourself it was too difficult. But you're not alone. There are tons of resources online for you to embark on your guitar playing journey. Check out some of these awesome websites where you can find tabs and other useful tips and tricks.

-   [Ultimate Guitars](https://www.ultimate-guitar.com/)
-   [JustinGuitar](https://www.justinguitar.com/)
-   [Marty Music](https://www.youtube.com/@MartyMusic)

## Which Guitar Should I Start Playing?

Simply put, there are three main types of guitars: classical, acoustic, and electric. Choosing which one to start with really depends on what you'll be wanting to play. They are all very similar though, so if you know how to play on one, you'll definitely be able to play on the other two.

```{r create_audio, echo=FALSE}
# Load necessary libraries
library(htmltools)

# Create and render the audio players with inline CSS and dynamic GIF switching
create_audio_players <- function() {
  tagList(
    # GIF container at the top, centered
    div(id = "guitar-image-container", style = "text-align: center; margin-bottom: 20px;",
        img(src = "images/GuitarStatic.jpg", id = "guitar-image",
            style = "display: block; width:200px;height:auto; margin: 0 auto;")
    ),
    
    # Container for the audio players below the GIF
    div(style = "display: flex; justify-content: space-around; margin-top: 20px;",
        
        # Classical Guitar audio player
        div(style = "flex: 1; text-align: center;",
            h3("Classical Guitar", style = "font-size: 18px; font-weight: normal;"),
            tags$audio(id = "classical-audio", controls = TRUE, 
                       tags$source(src = "sounds/Classical.mp3", type = "audio/mp3"))
        ),
        
        # Acoustic Guitar audio player
        div(style = "flex: 1; text-align: center;",
            h3("Acoustic Guitar", style = "font-size: 18px; font-weight: normal;"),
            tags$audio(id = "acoustic-audio", controls = TRUE, 
                       tags$source(src = "sounds/Acoustic.mp3", type = "audio/mp3"))
        ),
        
        # Electric Guitar audio player
        div(style = "flex: 1; text-align: center;",
            h3("Electric Guitar", style = "font-size: 18px; font-weight: normal;"),
            tags$audio(id = "electric-audio", controls = TRUE, 
                       tags$source(src = "sounds/Electric.mp3", type = "audio/mp3"))
        )
    ),
    
    # JavaScript to switch between static image and GIF based on audio playback
    tags$script(HTML("
      document.addEventListener('DOMContentLoaded', function() {
        var classicalAudio = document.getElementById('classical-audio');
        var acousticAudio = document.getElementById('acoustic-audio');
        var electricAudio = document.getElementById('electric-audio');
        var guitarImage = document.getElementById('guitar-image');
        
        function playGif() {
          guitarImage.src = 'images/Guitar.gif';  // Switch to GIF
        }

        function showStaticImage() {
          guitarImage.src = 'images/GuitarStatic.jpg';  // Switch back to static image
        }

        // Attach event listeners to all audio elements
        [classicalAudio, acousticAudio, electricAudio].forEach(function(audio) {
          audio.addEventListener('play', playGif);  // Show GIF when audio starts
          audio.addEventListener('pause', showStaticImage); // Show static image when paused
          audio.addEventListener('ended', showStaticImage); // Show static image when audio ends
        });
      });
    "))
  )
}

# Render the audio players and dynamic image switching
create_audio_players()
```

# Ideas for music to play

## Data used

To measure which genres are popular to play, we will analyse a dataset concerning Rolling Stone's 500 Greatest Albums of All Time from 2012. This list is revised every decade so a newer list is available but has not been generously turned into a manipulable dataset and published on data.world like the 2012 list.

We must first load this dataset into R, which can be executed silently. We will also load useful packages at the same time.

```{r loading, include=F}
library(tidyverse)
library(shiny)
library(DT)
library(forcats) # For ordering
RollingStone <- read.csv('albumlist.csv')
```

![](images/RollingStone.png){fig-align="center" width="436"}

## Exploring the data

There is a variety of subgenres present in the loaded dataset. In a first time, it might be interesting to simply explore how songs were classified. Since these were added to the dataset using a python package, this will also help identify potential misclassifications.

```{r setup, include=FALSE}
# Function to generate a dropdown menu and render a filtered table
create_filtered_table <- function(dataset, genre_column = "Genre") {
  dt <- datatable(dataset, 
                  filter = 'top', 
                  options = list(pageLength = 5, dom = 't', 
                                 initComplete = JS(
                                   "function(settings, json) {
                                      $(this.api().table().container()).css({'font-size': '10px'});
                                   }")
                  ), 
                  rownames = FALSE)
  
  # Use onRender to create a dropdown menu for the genre filter
  dt %>%
    htmlwidgets::onRender("
      function(el, x) {
        var select = $('<select id=\"genreFilter\"><option value=\"\">All Subgenres</option></select>')
          .appendTo($('#datatable-filter'))
          .on('change', function() {
            var val = $.fn.dataTable.util.escapeRegex($(this).val());
            $('#example').DataTable().column(1).search(val ? '^' + val + '$' : '', true, false).draw();
          });

        var columnData = $('#example').DataTable().column(1).data().unique().sort();
        columnData.each(function(d) {
          select.append('<option value=\"' + d + '\">' + d + '</option>')
        });
      }
    ")
}
```

```{r table interactive, echo=F}
# Create and display the interactive table with a genre filter
create_filtered_table(RollingStone)
```

## Which genre is the most popular?

There appears to be issues with some of the songs not being given any genre. Nevertheless, we can still visualise the most represented genres:

```{r histogram, echo=F, cache=T}
# Count the occurrences of each genre and select the top 5
top_genres <- RollingStone %>%
  count(Genre, sort = TRUE) %>%
  top_n(5, n) %>%
  pull(Genre)

# Filter the dataset to include only the top 5 genres
RollingStone_top5 <- RollingStone %>%
  filter(Genre %in% top_genres)

# Create a bar plot showing only the top 5 genres
ggplot(RollingStone_top5, aes(x = fct_infreq(Genre))) +
  geom_bar(fill = "steelblue") +
  labs(title = "Top 5 Genres by Number of Occurrences in the Top 500", 
       x = "Genre",
       y = "Count")
```

## What about specific artists or gender?

There aren't many repeat artists in the data, and gender is not given so not much can be done here without a larger and more detailed dataset. The code in R for obtaining counts for artists and gender in such a situation is however presented out of interest.

```{r counts, eval=F}
#| code-line-numbers: "|1-2|4-5|" # To highlight lines

artist_counts <- RollingStone %>%
  count(Artist, sort = TRUE)
  
gender_counts <- RollingStone %>%
  count(Gender, sort = TRUE)
```
